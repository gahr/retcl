'\"
'\" Generated from file 'retcl\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2014-2017 Pietro Cerutti <gahr@gahr\&.ch>
'\"
.TH "retcl" n 0\&.2\&.2 retcl "Redis client"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
retcl \- Tcl client library for Redis
.SH SYNOPSIS
package require \fBTcl  8\&.6\fR
.sp
package require \fBTclOO  1\&.0\fR
.sp
\fBretcl create\fR \fIr\fR ?hostname? ?port?
.sp
\fBretcl create\fR \fIr\fR -noconnect
.sp
\fIr\fR \fBconnected\fR
.sp
\fIr\fR \fBconnect\fR ?hostname? ?port?
.sp
\fIr\fR \fBdisconnect\fR
.sp
\fIr\fR \fBreconnect\fR
.sp
\fIr\fR ?-sync? ?-cb cmdPrefix? \fBREDIS_CMD\fR ?arg \&.\&.\&.?
.sp
\fIr\fR \fBresult\fR ?-async? \fIcmdId\fR
.sp
\fIr\fR \fBresultReady\fR \fIcmdId\fR
.sp
\fIr\fR \fBresultType\fR \fIcmdId\fR
.sp
\fIr\fR \fBallResults\fR
.sp
\fIr\fR \fB+keepCache\fR
.sp
\fIr\fR \fB-keepCache\fR
.sp
\fIr\fR \fBclearResult\fR ?cmdId?
.sp
\fIr\fR \fB+async\fR
.sp
\fIr\fR \fB-async\fR
.sp
\fIr\fR \fBerrorHandler\fR ?cmdPrefix?
.sp
\fIr\fR \fBpipeline\fR \fIscript\fR
.sp
\fIr\fR \fBcallback\fR \fIitem\fR ?cmdPrefix?
.sp
.BE
.SH DESCRIPTION
The \fBretcl\fR module is an event-driven, object-oriented, Redis client
library, which API exposes a single \fBretcl\fR class\&. Objects of this
class represent connections to a Redis server and are used to send requests as
commands and retrieve responses\&.
.PP
Other than a few book-keeping methods, instance objects of the \fBretcl\fR
class transparently handle Redis commands as first-class methods\&. As an
example,
.CS

r SET K Hello
.CE
can be used to set the value of the key
\fIK\fR to the string \fIHello\fR\&. This is achieved by proxying all unknown
methods to the Redis server by concatenating all arguments, effectively making
the \fBretcl\fR package completely decoupled from any version of Redis\&.
This has several advantages:
.IP \(bu
The \fBretcl\fR package does not need to know about the semantics of
a particular Redis command\&. This includes syntax checks, context verification
and arguments validation, which are offloaded to the Redis server\&. As a
consequence, the code base remains clean and small\&.
.IP \(bu
New commands introduced by a server upgrade are immediately available to
a live application\&.
.PP
.SH COMMANDS
.TP
\fBretcl create\fR \fIr\fR ?hostname? ?port?
Create a new \fBretcl\fR object and automatically connects to the Redis
server at \fIhostname\fR:\fIport\fR\&. The \fIhostname\fR argument defaults to
127\&.0\&.0\&.1\&. The \fIport\fR argument defaults to 6379\&.
.sp
Example: create a Redis client object named \fIr\fR and connect to the Redis
server on 192\&.168\&.1\&.3, default port 6379:
.CS


    % retcl create r 192\&.168\&.1\&.3
    ::r

.CE
.TP
\fBretcl create\fR \fIr\fR -noconnect
Create a new \fBretcl\fR object in disconnected mode\&. The object can be
connected further on using the \fBconnect\fR or \fBreconnect\fR\&.
.TP
\fIr\fR \fBconnected\fR
Check whether the socket with the Redis server is open\&. Return 1 if it is, 0
otherwise\&.
Example: check the connection status, disconnect, check again:
.CS


    % r connected
    1
    % r disconnect
    % r connected
    0

.CE
.TP
\fIr\fR \fBconnect\fR ?hostname? ?port?
Connect to the Redis server at \fIhostname\fR:\fIport\fR, which defaults to
127\&.0\&.0\&.1:6379\&. It is an error to attempt a connection using an already
connected object\&.
.TP
\fIr\fR \fBdisconnect\fR
Disconnect from the Redis server\&.
.TP
\fIr\fR \fBreconnect\fR
Try to reconnect to the server that was specified upon construction for up to
10 seconds\&. If no connection can be established after this time, an error is
reported using the \fIerror handler\fR\&.
.TP
\fIr\fR ?-sync? ?-cb cmdPrefix? \fBREDIS_CMD\fR ?arg \&.\&.\&.?
Methods not explicitely defined by the \fBretcl\fR class are forwarded to
Redis by concatenating the \fBREDIS_CMD\fR and any optional arguments\&.
By default, commands are sent in asynchronous mode and immediately return a
\fIcmdId\fR identifier that can be later used to retrieve the result\&. The
default mode can be changed with the \fB+async\fR and \fB-async\fR commands\&.
if \fI-sync\fR is specified, the command is sent synchronously and will wait
until a response is available\&. The body of the response is returned\&.
If \fI-cb cmdPrefix\fR is specified, the command is sent asynchronously and
return a \fIcmdId\fR immediately\&. \fIcmdPrefix\fR will eventually be called
when the response is available, with the \fIcmdId\fR, type and body of the
result as additional parameters\&.
Either \fI-sync\fR or \fI-cb cmdPrefix\fR might be specified, but not both\&.
.TP
\fIr\fR \fBresult\fR ?-async? \fIcmdId\fR
Return the result of the command identified by \fIcmdId\fR\&. If the response is
not yet available and \fI-async\fR is specified, the command returns the empty
string, otherwise it will wait\&.
.TP
\fIr\fR \fBresultReady\fR \fIcmdId\fR
Return a boolean indicating whether the response for the command identified by
\fIcmdId\fR is ready for retrieval\&.
.TP
\fIr\fR \fBresultType\fR \fIcmdId\fR
Return the type of the result of the command identified by \fIcmdId\fR\&. If the
response is not ready for retrieval, this command returns the empty string\&.
.TP
\fIr\fR \fBallResults\fR
Return a dictionary of all available results\&. Results are kept in a \fIresults cache\fR for later retrieval\&. Each key in the dictionary is a \fIcmdId\fR and each value is its associated response body\&.
.TP
\fIr\fR \fB+keepCache\fR
Turn on the use of the \fIresults cache\fR\&. This is the default\&.
.TP
\fIr\fR \fB-keepCache\fR
Turn off the use of the \fIresults cache\fR\&. Results are removed from the
cache as soon as they are retrieved\&.
.TP
\fIr\fR \fBclearResult\fR ?cmdId?
Remove the result for ?cmdId? from the \fIresults cache\fR or clear it
entirely\&.
.TP
\fIr\fR \fB+async\fR
Turn on asynchronous operation\&. In this mode, commands return immediately with
a \fIcommand identifier\fR\&.
.TP
\fIr\fR \fB-async\fR
Turn off asynchronous operation\&. In this mode, commands wait until a response
is received and return the body\&.
.TP
\fIr\fR \fBerrorHandler\fR ?cmdPrefix?
Set up an \fIerror handler\fR to be called whenever an asynchronous error
occurs inside the \fBretcl\fR package\&. The \fIcmdPrefix\fR is appended an
error message\&. If \fIcmdPrefix\fR is the empty string, the \fIerror
handler\fR is restored to the default \fBerror\fR command\&. This command returns
the old \fIcmdPrefix\fR\&.
.TP
\fIr\fR \fBpipeline\fR \fIscript\fR
Pipelining allows to queue several commands and send them out in a single batch
to the Redis server\&. This is more efficient than sending each command
independently\&. The \fIscript\fR is evaluated at caller's scope and it might
contain any valid Tcl commands\&. Any Redis commands sent during the evaluation
of the \fIscript\fR are queued and sent to the Redis server at the end of the
script\&. This command returns the empty string\&. Results can be obtained using
the \fBallResults\fR method\&.
.TP
\fIr\fR \fBcallback\fR \fIitem\fR ?cmdPrefix?
Callbacks are part of the Redis Pub/Sub mechanism\&. A client registers a
callback on a subscription item, and then subscribes to that channel using the
\fIPSUBSCRIBE\fR Redis command\&. When a message arrives on the subscription
item, \fIcmdPrefix\fR is called appending the following to the arguments list:a
.RS
.IP \(bu
\fItype\fR The type of the message (subscribe, unsubscribe, or
message)\&.
.IP \(bu
\fIpattern\fR The subscription item as specified in the \fIPSUBSCRIBE\fR command\&.
.IP \(bu
\fIchannel\fR The actual channel the message was sent to\&.
.IP \(bu
\fImessage\fR The message received\&.
.RE
.PP
.SH COPYRIGHT
.nf
Copyright (c) 2014-2017 Pietro Cerutti <gahr@gahr\&.ch>

.fi